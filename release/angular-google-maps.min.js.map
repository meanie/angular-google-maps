{"version":3,"sources":["google.service.js","places-autocomplete.js"],"names":["angular","$window","google","window","maps","module","undefined","template","onChange","controller","options","Google","GoogleMapsApi","$input","geoLocation","autocomplete","find","center","LatLng","latitude","$timeout","coords","longitude","setBounds","circle","getBounds"],"mappings":"iBAKAA,eAMOC,OAAQC,8BASZC,QAAQA,iBApBX,UAAA,SAAAF,GCAI,IAAAA,EAAUC,SAAOD,EAAWC,OAAAE,uIAAO,OAAAH,EAAAC,kQAI/BG,EAAOL,EAAAM,kBAQbC,OAAAA,4CAAAA,sCAKEC,kDAEFC,YAAAA,4BAGEC,QAAMC,qGAKsBA,EAAAC,4BAI1B,IAAMC,EAAAA,KAGNC,EAAKC,KAAeD,2BAMlBA,EAAAA,EAAeE,KAAOF,iBAIpBG,aAAYN,IAAOP,EAAKc,KACtBJ,OAAAA,aAAmBK,EAAAA,GACnBL,kHAONM,OAAS,IAAAT,EAAAP,KAAAc,OAAAJ,EAAAO,OAAAF,SAAAL,EAAAO,OAAAC,kBAAmDP,aAAAQ,UAAAC,EAAAC,wEAOxD,mkBA4CPtB,EAAQA","file":"angular-google-maps.min.js","sourcesContent":["(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Google.Maps.Api.Service', [])\n\n/**\n * Wrapper for google maps API\n */\n.factory('GoogleMapsApi', function($window) {\n  if (!$window.google || !$window.google.maps) {\n    throw new Error(\n      'Global `google` variable or `google.maps` missing.' +\n      'Make sure to include the relevant external Google script(s).'\n    );\n  }\n  return $window.google;\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n/**\n * Module definition and dependencies\n */\nangular.module('Google.Maps.PlacesAutocomplete.Component', [\n  'Google.Maps.Api.Service',\n])\n\n/**\n * Directive\n */\n.component('placesAutocomplete', {\n  template: `<ng-transclude/>`,\n  transclude: true,\n  bindings: {\n    geoLocation: '<',\n    options: '<',\n    onChange: '&',\n  },\n  controller(GoogleMapsApi, $timeout, $convert, $element) {\n\n    //Rename\n    const Google = GoogleMapsApi;\n\n    /**\n     * Post link\n     */\n    this.$postLink = function() {\n\n      //Get data\n      const {geoLocation, options} = this;\n      const $input = $element.find('input');\n\n      //Initialize autocomplete API now with options\n      this.autocomplete = new Google.maps.places.Autocomplete(\n        $input[0], options\n      );\n\n      //Set bounds if geo location given\n      if (\n        geoLocation && typeof geoLocation === 'object' && geoLocation.coords\n      ) {\n        const circle = new Google.maps.Circle({\n          radius: geoLocation.coords.accuracy,\n          center: new Google.maps.LatLng(\n            geoLocation.coords.latitude,\n            geoLocation.coords.longitude\n          ),\n        });\n        this.autocomplete.setBounds(circle.getBounds());\n      }\n\n      //Kill auto complete\n      $timeout(() => $input.attr('autocomplete', 'goawaygoogle'), 100);\n\n      //Add listener for place changes\n      this.listener = Google.maps.event.addListener(\n        this.autocomplete, 'place_changed', () => {\n\n          //Get selected place and convert keys\n          const place = this.autocomplete.getPlace();\n          place.inputValue = $input[0].value;\n\n          //Trigger handler\n          this.placeChanged(place);\n        }\n      );\n    };\n\n    /**\n     * On changes\n     */\n    this.$onChanges = function() {\n\n      //Propagate options\n      if (this.autocomplete && this.options) {\n        this.autocomplete.setOptions(this.options);\n      }\n    };\n\n    /**\n     * On destroy\n     */\n    this.$onDestroy = function() {\n      Google.maps.event.removeListener(this.listener);\n      Google.maps.event.clearInstanceListeners(this.autocomplete);\n      let containers = document.getElementsByClassName('pac-container');\n      for (let i = 0; i < containers.length; i++) {\n        containers[i].parentNode.removeChild(containers[i]);\n      }\n    };\n\n    /**\n     * Place changed handler\n     */\n    this.placeChanged = function(place) {\n      place = $convert.object.keysToCamelCase(place);\n      $timeout(() => {\n        this.onChange({place});\n      });\n    };\n  },\n});\n\n})(window, window.angular);\n"]}