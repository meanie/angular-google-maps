{"version":3,"sources":["meanie-angular-google-maps.min.js","google.service.js","placesAutocomplete.directive.js"],"names":["window","angular","undefined","module","factory","$window","google","maps","Error","directive","Google","restrict","scope","geoLocation","options","onChange","controller","$scope","$attrs","$element","$convert","placeChanged","place","object","keysToCamelCase","link","element","autocomplete","getPlace","inputValue","value","$apply","places","Autocomplete","isObject","coords","circle","Circle","radius","accuracy","center","LatLng","latitude","longitude","setBounds","getBounds","listener","event","addListener","$on","removeListener","clearInstanceListeners","containers","document","getElementsByClassName","i","length","parentNode","removeChild"],"mappings":"CAMA,SAAWA,EAAQC,EAASC,GCD5B,YDQED,GCFKE,OAAQ,8BASZC,QAAQ,iBApBX,UAAA,SAAAC,GCAC,IAAAA,EAASC,SAAiBD,EAAAC,OAAWC,KAAC,KAAA,IAAAC,OAAA,iHFsBnC,OAAOH,GAAQC,WAEhBN,OAAQA,OAAOC,SAClB,SAAWD,EAAQC,EAASC,GEpB5B,YF2BED,GEnBAE,OAAO,4CAAA,4BFwBNM,UEnBG,sBAAU,gBAAA,SAAAC,GFoBZ,OACEC,SAAU,IACVC,OACEC,YAAa,IACbC,QAAS,IElBbC,SAAA,KFyBEC,YAAa,SAAU,SAAU,WAAY,WAAY,SAAoBC,EAAQC,EAAQC,EAAUC,GAGrGH,EEnBIH,QAAOG,EAAUH,YFwBrBG,EAAOI,aAAe,SAAUC,GAC1BJ,EAAOH,UACTE,EAAOF,UACLO,MAAOF,EAASG,OAAOC,gBAAgBF,QAU/CG,KElBI,SAAMb,EAAec,GFmCvB,QAASL,KAGP,GAAIC,GAAQK,EAAaC,UACzBN,GAAMO,WAAaH,EAAQ,GAAGI,MAG9BlB,EAAMmB,OAAO,WACXnB,EAAMS,aAAaC,KAtBvB,GElBEK,GAAY,GAAOjB,GAAKH,KACtByB,OAAMC,aAAYP,EAAO,GAAAd,EAAUE,QFoBvC,IAAIF,EAAMC,aAAeZ,EAAQiC,SAAStB,EAAMC,cAAgBD,EAAMC,YAAYsB,OAAQ,CACxF,GAAIC,GAAS,GAAI1B,GAAOH,KAAK8B,QAC3BC,OAAQ1B,EAAMC,YAAYsB,OAAOI,SACjCC,OAAQ,GAAI9B,GAAOH,KAAKkC,OAAO7B,EAAMC,YAAYsB,OAAOO,SAAU9B,EAAMC,YAAYsB,OAAOQ,YEdjGhB,GAASiB,UAAeR,EAAAS,aFqCtB,GEdAC,GAAIpC,EAAaH,KAAAwC,MAASC,YAAArB,EAAuB,gBAAAN,EFiBjDT,GAAMqC,IAAI,WAAY,WACpBvC,EAAOH,KAAKwC,MAAMG,eAAeJ,GACjCpC,EAAOH,KAAKwC,MAAMI,uBAAuBxB,EAEzC,KAAK,GADDyB,GAAaC,SAASC,uBAAuB,iBACxCC,EAAI,EAAGA,EAAIH,EAAWI,OAAQD,IEZtCH,EAAOG,GAAAE,WAjGlBC,YAAAN,EAAAG,YFoHGvD,OAAQA,OAAOC","file":"meanie-angular-google-maps.min.js","sourcesContent":["/**\n * meanie-angular-google-maps * https://github.com/meanie/\n *\n * Copyright (c) 2016 Adam Reis <adam@reis.nz>\n * License: MIT\n */\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('Google.Maps.Api.Service', [])\n\n  /**\n   * Wrapper for google maps API\n   */\n  .factory('GoogleMapsApi', ['$window', function ($window) {\n    if (!$window.google || !$window.google.maps) {\n      throw new Error('Global `google` variable or `google.maps` missing.' + 'Make sure to include the relevant external Google script(s).');\n    }\n    return $window.google;\n  }]);\n})(window, window.angular);\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('Google.Maps.PlacesAutocomplete.Directive', ['Google.Maps.Api.Service'])\n\n  /**\n   * Directive\n   */\n  .directive('placesAutocomplete', ['GoogleMapsApi', function (Google) {\n    return {\n      restrict: 'A',\n      scope: {\n        geoLocation: '=',\n        options: '=',\n        onChange: '&'\n      },\n\n      /**\n       * Controller\n       */\n      controller: ['$scope', '$attrs', '$element', '$convert', function controller($scope, $attrs, $element, $convert) {\n\n        //Set options\n        $scope.options = $scope.options || {};\n\n        /**\n         * Place changed handler\n         */\n        $scope.placeChanged = function (place) {\n          if ($attrs.onChange) {\n            $scope.onChange({\n              place: $convert.object.keysToCamelCase(place)\n            });\n          }\n        };\n      }],\n\n\n      /**\n       * Linking function\n       */\n      link: function link(scope, element) {\n\n        //Initialize autocomplete API now with options\n        var autocomplete = new Google.maps.places.Autocomplete(element[0], scope.options);\n\n        //Set bounds if geo location given\n        if (scope.geoLocation && angular.isObject(scope.geoLocation) && scope.geoLocation.coords) {\n          var circle = new Google.maps.Circle({\n            radius: scope.geoLocation.coords.accuracy,\n            center: new Google.maps.LatLng(scope.geoLocation.coords.latitude, scope.geoLocation.coords.longitude)\n          });\n          autocomplete.setBounds(circle.getBounds());\n        }\n\n        /**\n         * Place changed handler\n         */\n        function placeChanged() {\n\n          //Get selected place and convert keys\n          var place = autocomplete.getPlace();\n          place.inputValue = element[0].value;\n\n          //Set in scope\n          scope.$apply(function () {\n            scope.placeChanged(place);\n          });\n        }\n\n        /**\n         * Event listener for place changes\n         */\n        var listener = Google.maps.event.addListener(autocomplete, 'place_changed', placeChanged);\n\n        //Event listener for scope destruction\n        scope.$on('$destroy', function () {\n          Google.maps.event.removeListener(listener);\n          Google.maps.event.clearInstanceListeners(autocomplete);\n          var containers = document.getElementsByClassName('pac-container');\n          for (var i = 0; i < containers.length; i++) {\n            containers[i].parentNode.removeChild(containers[i]);\n          }\n        });\n      }\n    };\n  }]);\n})(window, window.angular);","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Google.Maps.Api.Service', [])\n\n/**\n * Wrapper for google maps API\n */\n.factory('GoogleMapsApi', function($window) {\n  if (!$window.google || !$window.google.maps) {\n    throw new Error(\n      'Global `google` variable or `google.maps` missing.' +\n      'Make sure to include the relevant external Google script(s).'\n    );\n  }\n  return $window.google;\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Google.Maps.PlacesAutocomplete.Directive', [\n  'Google.Maps.Api.Service'\n])\n\n/**\n * Directive\n */\n.directive('placesAutocomplete', ['GoogleMapsApi', function(Google) {\n  return {\n    restrict: 'A',\n    scope: {\n      geoLocation: '=',\n      options: '=',\n      onChange: '&'\n    },\n\n    /**\n     * Controller\n     */\n    controller($scope, $attrs, $element, $convert) {\n\n      //Set options\n      $scope.options = $scope.options || {};\n\n      /**\n       * Place changed handler\n       */\n      $scope.placeChanged = function(place) {\n        if ($attrs.onChange) {\n          $scope.onChange({\n            place: $convert.object.keysToCamelCase(place)\n          });\n        }\n      };\n    },\n\n    /**\n     * Linking function\n     */\n    link(scope, element) {\n\n      //Initialize autocomplete API now with options\n      let autocomplete = new Google.maps.places.Autocomplete(\n        element[0], scope.options\n      );\n\n      //Set bounds if geo location given\n      if (scope.geoLocation && angular.isObject(scope.geoLocation) && scope.geoLocation.coords) {\n        let circle = new Google.maps.Circle({\n          radius: scope.geoLocation.coords.accuracy,\n          center: new Google.maps.LatLng(\n            scope.geoLocation.coords.latitude, scope.geoLocation.coords.longitude\n          )\n        });\n        autocomplete.setBounds(circle.getBounds());\n      }\n\n      /**\n       * Place changed handler\n       */\n      function placeChanged() {\n\n        //Get selected place and convert keys\n        let place = autocomplete.getPlace();\n        place.inputValue = element[0].value;\n\n        //Set in scope\n        scope.$apply(() => {\n          scope.placeChanged(place);\n        });\n      }\n\n      /**\n       * Event listener for place changes\n       */\n      let listener = Google.maps.event.addListener(\n        autocomplete, 'place_changed', placeChanged\n      );\n\n      //Event listener for scope destruction\n      scope.$on('$destroy', () => {\n        Google.maps.event.removeListener(listener);\n        Google.maps.event.clearInstanceListeners(autocomplete);\n        let containers = document.getElementsByClassName('pac-container');\n        for (let i = 0; i < containers.length; i++) {\n          containers[i].parentNode.removeChild(containers[i]);\n        }\n      });\n    }\n  };\n}]);\n\n})(window, window.angular);\n"],"sourceRoot":"/source/"}