{"version":3,"sources":["google.service.js","placesAutocomplete.directive.js"],"names":["angular","$window","google","window","undefined","maps","Error","module","onChange","Google","controller","$attrs","options","scope","geoLocation","center","LatLng","coords","latitude","autocomplete","placeChanged","circle","getBounds","listener","containers","document","getElementsByClassName","removeChild","i"],"mappings":"iBAKAA,eAMOC,OAAQC,8BASZC,QAAQA,iBApBX,UAAA,SAAAF,GCAC,IAAAA,EAASE,SAAiBC,EAAAA,OAAWC,KAAC,MAAA,IAAAC,MAAA,6KAKvCN,eAQEO,OAAO,4CAAA,sCAKHC,sBAAU,gBAAA,SAAAC,0DAMZC,SAAAA,6EASQC,QAAOH,EAAUI,2GAmBnBC,SAAMC,EAAed,OAGrBe,EAAYN,IAAOJ,EAAKW,KACtBH,OAAMC,aAAYG,EAAOC,GAAAA,EAAUL,mOASzCM,EAASC,UAAeC,EAAAC,iBAuBtBC,EAAIC,EAAaC,KAAAA,MAASC,YAAAA,EAAuB,gSAS9CvB,EAAOH,GAAAA,WAjGlB2B,YAAAH,EAAAI","file":"angular-google-maps.min.js","sourcesContent":["(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Google.Maps.Api.Service', [])\n\n/**\n * Wrapper for google maps API\n */\n.factory('GoogleMapsApi', function($window) {\n  if (!$window.google || !$window.google.maps) {\n    throw new Error(\n      'Global `google` variable or `google.maps` missing.' +\n      'Make sure to include the relevant external Google script(s).'\n    );\n  }\n  return $window.google;\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Google.Maps.PlacesAutocomplete.Directive', [\n  'Google.Maps.Api.Service'\n])\n\n/**\n * Directive\n */\n.directive('placesAutocomplete', ['GoogleMapsApi', function(Google) {\n  return {\n    restrict: 'A',\n    scope: {\n      geoLocation: '=',\n      options: '=',\n      onChange: '&'\n    },\n\n    /**\n     * Controller\n     */\n    controller($scope, $attrs, $element, $convert) {\n\n      //Set options\n      $scope.options = $scope.options || {};\n\n      /**\n       * Place changed handler\n       */\n      $scope.placeChanged = function(place) {\n        if ($attrs.onChange) {\n          $scope.onChange({\n            place: $convert.object.keysToCamelCase(place)\n          });\n        }\n      };\n    },\n\n    /**\n     * Linking function\n     */\n    link(scope, element) {\n\n      //Initialize autocomplete API now with options\n      let autocomplete = new Google.maps.places.Autocomplete(\n        element[0], scope.options\n      );\n\n      //Set bounds if geo location given\n      if (scope.geoLocation && angular.isObject(scope.geoLocation) && scope.geoLocation.coords) {\n        let circle = new Google.maps.Circle({\n          radius: scope.geoLocation.coords.accuracy,\n          center: new Google.maps.LatLng(\n            scope.geoLocation.coords.latitude, scope.geoLocation.coords.longitude\n          )\n        });\n        autocomplete.setBounds(circle.getBounds());\n      }\n\n      /**\n       * Place changed handler\n       */\n      function placeChanged() {\n\n        //Get selected place and convert keys\n        let place = autocomplete.getPlace();\n        place.inputValue = element[0].value;\n\n        //Set in scope\n        scope.$apply(() => {\n          scope.placeChanged(place);\n        });\n      }\n\n      /**\n       * Event listener for place changes\n       */\n      let listener = Google.maps.event.addListener(\n        autocomplete, 'place_changed', placeChanged\n      );\n\n      //Event listener for scope destruction\n      scope.$on('$destroy', () => {\n        Google.maps.event.removeListener(listener);\n        Google.maps.event.clearInstanceListeners(autocomplete);\n        let containers = document.getElementsByClassName('pac-container');\n        for (let i = 0; i < containers.length; i++) {\n          containers[i].parentNode.removeChild(containers[i]);\n        }\n      });\n    }\n  };\n}]);\n\n})(window, window.angular);\n"]}