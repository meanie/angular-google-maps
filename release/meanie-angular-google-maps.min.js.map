{"version":3,"sources":["api.service.js","placesAutocomplete.directive.js","meanie-angular-google-maps.min.js"],"names":["window","angular","undefined","module","factory","$window","google","Error","directive","Google","$convert","findAddressComponentOfType","place","type","format","c","addressComponents","length","types","indexOf","determineSpread","geometry","viewport","distance","maps","spherical","computeDistanceBetween","getNorthEast","getSouthWest","Math","round","roundLatLng","num","restrict","scope","address","geoLocation","link","element","attrs","placeChanged","autocomplete","getPlace","object","keysToCamelCase","$apply","selected","enteredValue","value","spread","latitude","location","lat","longitude","lng","vicinity","streetNumber","streetName","city","postalCode","options","restrictTypes","split","restrictCountry","componentRestrictions","country","places","Autocomplete","isObject","coords","circle","Circle","radius","accuracy","center","LatLng","setBounds","getBounds","listener","event","addListener","$on","removeListener","clearInstanceListeners","containers","document","getElementsByClassName","i","parentNode","removeChild"],"mappings":"CAOA,SAAAA,EAAAC,EAAAC,GAAA,YAKAD,GAAAE,OAAA,8BAKAC,QAAA,iBAAA,UAAA,SAAAC,GACA,IAAAA,EAAAC,OACA,KAAA,IAAAC,OACA,iGClBA,OAAAF,GAAAC,WAGAN,OAAAA,OAAAC,SAEA,SAAAD,EAAAC,EAAAC,GAAA,YAUAD,GAAAE,OAAA,4CACA,0BACA,oBAMAK,UAAA,sBAAA,gBAAA,WAAA,SACAC,EAAAC,GAMA,QAAAC,GAAAC,EAAAC,EAAAC,GACAA,EAAAA,GAAA,WACA,KAAA,GAAAC,GAAA,EAAAA,EAAAH,EAAAI,kBAAAC,OAAAF,IACA,GAAA,KAAAH,EAAAI,kBAAAD,GAAAG,MAAAC,QAAAN,GACA,MAAAD,GAAAI,kBAAAD,GAAAD,EAGA,OAAA,GAMA,QAAAM,GAAAR,GAGA,IAAAA,EAAAS,SAAAC,SACA,MAAA,EAIA,IAAAC,GAAAd,EAAAe,KAAAH,SAAAI,UAAAC,uBACAd,EAAAS,SAAAC,SAAAK,eAAAf,EAAAS,SAAAC,SAAAM,eAIA,OAAAC,MAAAC,MAAA,IAAAP,GAAA,IAMA,QAAAQ,GAAAC,GACA,MAAAH,MAAAC,MAAA,IAAAE,GAAA,IAMA,OACAC,SAAA,IACAC,OACAtB,MAAA,cACAuB,QAAA,gBACAC,YAAA,gBAEAC,KAAA,SAAAH,EAAAI,EAAAC,GAiCA,QAAAC,KAGA,GAAA5B,GAAA6B,EAAAC,UACA9B,GAAAF,EAAAiC,OAAAC,gBAAAhC,GAGAsB,EAAAW,OAAA,WAGAX,EAAAtB,MAAAA,EAGAsB,EAAAC,QAAAD,EAAAC,YACAD,EAAAC,QAAAW,UAAA,EACAZ,EAAAC,QAAAY,aAAAT,EAAA,GAAAU,MACAd,EAAAC,QAAAc,OAAA7B,EAAAR,GACAsB,EAAAC,QAAAe,SAAAnB,EAAAnB,EAAAS,SAAA8B,SAAAC,OACAlB,EAAAC,QAAAkB,UAAAtB,EAAAnB,EAAAS,SAAA8B,SAAAG,OACApB,EAAAC,QAAAoB,SAAA3C,EAAA2C,SACArB,EAAAC,QAAAqB,aAAA7C,EAAAC,EAAA,iBACAsB,EAAAC,QAAAsB,WAAA9C,EAAAC,EAAA,SACAsB,EAAAC,QAAAuB,KAAA/C,EAAAC,EAAA,YACAsB,EAAAC,QAAAwB,WAAAhD,EAAAC,EAAA,iBArDA,GAAAgD,KAGArB,GAAAsB,gBACAD,EAAA1C,MAAAqB,EAAAsB,cAAAC,MAAA,MAIAvB,EAAAwB,kBACAH,EAAAI,sBAAAJ,EAAAI,0BACAJ,EAAAI,sBAAAC,QAAA1B,EAAAwB,gBAIA,IAAAtB,GAAA,GAAAhC,GAAAe,KAAA0C,OAAAC,aAAA7B,EAAA,GAAAsB,EAGA,IAAA1B,EAAAE,aAAAnC,EAAAmE,SAAAlC,EAAAE,cAAAF,EAAAE,YAAAiC,OAAA,CACA,GAAAC,GAAA,GAAA7D,GAAAe,KAAA+C,QACAC,OAAAtC,EAAAE,YAAAiC,OAAAI,SACAC,OAAA,GAAAjE,GAAAe,KAAAmD,OACAzC,EAAAE,YAAAiC,OAAAnB,SAAAhB,EAAAE,YAAAiC,OAAAhB,YAGAZ,GAAAmC,UAAAN,EAAAO,aAoCA,GAAAC,GAAArE,EAAAe,KAAAuD,MAAAC,YACAvC,EAAA,gBAAAD,EAMAN,GAAA+C,IAAA,WAAA,WACAxE,EAAAe,KAAAuD,MAAAG,eAAAJ,GACArE,EAAAe,KAAAuD,MAAAI,uBAAA1C,EAEA,KAAA,GADA2C,GAAAC,SAAAC,uBAAA,iBACAC,EAAA,EAAAA,EAAAH,EAAAnE,OAAAsE,IACAH,EAAAG,GAAAC,WAAAC,YAAAL,EAAAG,YC6BGvF,OAAQA,OAAOC","file":"meanie-angular-google-maps.min.js","sourcesContent":["(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Google.Maps.Api.Service', [])\n\n/**\n * Wrapper for google maps API\n */\n.factory('GoogleMapsApi', ['$window', function($window) {\n  if (!$window.google) {\n    throw new Error(\n      'Global `google` variable missing. Make sure to include the relevant external ' +\n      'Google script(s).'\n    );\n  }\n  return $window.google;\n}]);\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * See: https://developers.google.com/maps/documentation/javascript/places-autocomplete\n *      https://github.com/kuhnza/angular-google-places-autocomplete/blob/master/src/autocomplete.js\n */\n\n/**\n * Module definition and dependencies\n */\nangular.module('Google.Maps.PlacesAutocomplete.Directive', [\n  'Google.Maps.Api.Service',\n  'Convert.Service'\n])\n\n/**\n * Directive\n */\n.directive('placesAutocomplete', ['GoogleMapsApi', '$convert', function(\n  Google, $convert\n) {\n\n  /**\n   * Helper to find an address component type\n   */\n  function findAddressComponentOfType(place, type, format) {\n    format = format || 'long_name';\n    for (var c = 0; c < place.addressComponents.length; c++) {\n      if (place.addressComponents[c].types.indexOf(type) !== -1) {\n        return place.addressComponents[c][format];\n      }\n    }\n    return '';\n  }\n\n  /**\n   * Determine spread of a place, (e.g. for inaccurate addresses, like a suburb or city)\n   */\n  function determineSpread(place) {\n\n    //Validate viewport data\n    if (!place.geometry.viewport) {\n      return 0;\n    }\n\n    //Get distance\n    var distance = Google.maps.geometry.spherical.computeDistanceBetween(\n      place.geometry.viewport.getNorthEast(), place.geometry.viewport.getSouthWest()\n    );\n\n    //Return rounded to meters\n    return Math.round(distance * 1000) / 1000;\n  }\n\n  /**\n   * Round lat/long values\n   */\n  function roundLatLng(num) {\n    return Math.round(num * 10000000) / 10000000;\n  }\n\n  /**\n   * Directive\n   */\n  return {\n    restrict: 'A',\n    scope: {\n      place: '=placeModel',\n      address: '=addressModel',\n      geoLocation: '=geoLocation'\n    },\n    link: function(scope, element, attrs) {\n\n      //Autocomplete options\n      var options = {};\n\n      //Restrict by types?\n      if (attrs.restrictTypes) {\n        options.types = attrs.restrictTypes.split(',');\n      }\n\n      //Restrict by country?\n      if (attrs.restrictCountry) {\n        options.componentRestrictions = options.componentRestrictions || {};\n        options.componentRestrictions.country = attrs.restrictCountry;\n      }\n\n      //Initialize autocomplete API now with options\n      var autocomplete = new Google.maps.places.Autocomplete(element[0], options);\n\n      //Set bounds if geo location given\n      if (scope.geoLocation && angular.isObject(scope.geoLocation) && scope.geoLocation.coords) {\n        var circle = new Google.maps.Circle({\n          radius: scope.geoLocation.coords.accuracy,\n          center: new Google.maps.LatLng(\n            scope.geoLocation.coords.latitude, scope.geoLocation.coords.longitude\n          )\n        });\n        autocomplete.setBounds(circle.getBounds());\n      }\n\n      /**\n       * Place changed handler\n       */\n      function placeChanged() {\n\n        //Get selected place and convert keys\n        var place = autocomplete.getPlace();\n        place = $convert.object.keysToCamelCase(place);\n\n        //Set in scope\n        scope.$apply(function() {\n\n          //Set entire place in scope model\n          scope.place = place;\n\n          //Set specific filtered address details in scope\n          scope.address = scope.address || {};\n          scope.address.selected = true;\n          scope.address.enteredValue = element[0].value;\n          scope.address.spread = determineSpread(place);\n          scope.address.latitude = roundLatLng(place.geometry.location.lat());\n          scope.address.longitude = roundLatLng(place.geometry.location.lng());\n          scope.address.vicinity = place.vicinity;\n          scope.address.streetNumber = findAddressComponentOfType(place, 'street_number');\n          scope.address.streetName = findAddressComponentOfType(place, 'route');\n          scope.address.city = findAddressComponentOfType(place, 'locality');\n          scope.address.postalCode = findAddressComponentOfType(place, 'postal_code');\n        });\n      }\n\n      /**\n       * Event listener for place changes\n       */\n      var listener = Google.maps.event.addListener(\n        autocomplete, 'place_changed', placeChanged\n      );\n\n      /**\n       * Event listener for scope destruction\n       */\n      scope.$on('$destroy', function() {\n        Google.maps.event.removeListener(listener);\n        Google.maps.event.clearInstanceListeners(autocomplete);\n        var containers = document.getElementsByClassName('pac-container');\n        for (var i = 0; i < containers.length; i++) {\n          containers[i].parentNode.removeChild(containers[i]);\n        }\n      });\n    }\n  };\n}]);\n\n})(window, window.angular);\n","/**\n * meanie-angular-google-maps - v1.0.2 - 10-0-2016\n * https://github.com/meanie/\n *\n * Copyright (c) 2016 Adam Buczynski <me@adambuczynski.com>\n * License: MIT\n */\n(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Google.Maps.Api.Service', [])\n\n/**\n * Wrapper for google maps API\n */\n.factory('GoogleMapsApi', ['$window', function($window) {\n  if (!$window.google) {\n    throw new Error(\n      'Global `google` variable missing. Make sure to include the relevant external ' +\n      'Google script(s).'\n    );\n  }\n  return $window.google;\n}]);\n\n})(window, window.angular);\n\n(function(window, angular, undefined) {'use strict';\n\n/**\n * See: https://developers.google.com/maps/documentation/javascript/places-autocomplete\n *      https://github.com/kuhnza/angular-google-places-autocomplete/blob/master/src/autocomplete.js\n */\n\n/**\n * Module definition and dependencies\n */\nangular.module('Google.Maps.PlacesAutocomplete.Directive', [\n  'Google.Maps.Api.Service',\n  'Convert.Service'\n])\n\n/**\n * Directive\n */\n.directive('placesAutocomplete', ['GoogleMapsApi', '$convert', function(\n  Google, $convert\n) {\n\n  /**\n   * Helper to find an address component type\n   */\n  function findAddressComponentOfType(place, type, format) {\n    format = format || 'long_name';\n    for (var c = 0; c < place.addressComponents.length; c++) {\n      if (place.addressComponents[c].types.indexOf(type) !== -1) {\n        return place.addressComponents[c][format];\n      }\n    }\n    return '';\n  }\n\n  /**\n   * Determine spread of a place, (e.g. for inaccurate addresses, like a suburb or city)\n   */\n  function determineSpread(place) {\n\n    //Validate viewport data\n    if (!place.geometry.viewport) {\n      return 0;\n    }\n\n    //Get distance\n    var distance = Google.maps.geometry.spherical.computeDistanceBetween(\n      place.geometry.viewport.getNorthEast(), place.geometry.viewport.getSouthWest()\n    );\n\n    //Return rounded to meters\n    return Math.round(distance * 1000) / 1000;\n  }\n\n  /**\n   * Round lat/long values\n   */\n  function roundLatLng(num) {\n    return Math.round(num * 10000000) / 10000000;\n  }\n\n  /**\n   * Directive\n   */\n  return {\n    restrict: 'A',\n    scope: {\n      place: '=placeModel',\n      address: '=addressModel',\n      geoLocation: '=geoLocation'\n    },\n    link: function(scope, element, attrs) {\n\n      //Autocomplete options\n      var options = {};\n\n      //Restrict by types?\n      if (attrs.restrictTypes) {\n        options.types = attrs.restrictTypes.split(',');\n      }\n\n      //Restrict by country?\n      if (attrs.restrictCountry) {\n        options.componentRestrictions = options.componentRestrictions || {};\n        options.componentRestrictions.country = attrs.restrictCountry;\n      }\n\n      //Initialize autocomplete API now with options\n      var autocomplete = new Google.maps.places.Autocomplete(element[0], options);\n\n      //Set bounds if geo location given\n      if (scope.geoLocation && angular.isObject(scope.geoLocation) && scope.geoLocation.coords) {\n        var circle = new Google.maps.Circle({\n          radius: scope.geoLocation.coords.accuracy,\n          center: new Google.maps.LatLng(\n            scope.geoLocation.coords.latitude, scope.geoLocation.coords.longitude\n          )\n        });\n        autocomplete.setBounds(circle.getBounds());\n      }\n\n      /**\n       * Place changed handler\n       */\n      function placeChanged() {\n\n        //Get selected place and convert keys\n        var place = autocomplete.getPlace();\n        place = $convert.object.keysToCamelCase(place);\n\n        //Set in scope\n        scope.$apply(function() {\n\n          //Set entire place in scope model\n          scope.place = place;\n\n          //Set specific filtered address details in scope\n          scope.address = scope.address || {};\n          scope.address.selected = true;\n          scope.address.enteredValue = element[0].value;\n          scope.address.spread = determineSpread(place);\n          scope.address.latitude = roundLatLng(place.geometry.location.lat());\n          scope.address.longitude = roundLatLng(place.geometry.location.lng());\n          scope.address.vicinity = place.vicinity;\n          scope.address.streetNumber = findAddressComponentOfType(place, 'street_number');\n          scope.address.streetName = findAddressComponentOfType(place, 'route');\n          scope.address.city = findAddressComponentOfType(place, 'locality');\n          scope.address.postalCode = findAddressComponentOfType(place, 'postal_code');\n        });\n      }\n\n      /**\n       * Event listener for place changes\n       */\n      var listener = Google.maps.event.addListener(\n        autocomplete, 'place_changed', placeChanged\n      );\n\n      /**\n       * Event listener for scope destruction\n       */\n      scope.$on('$destroy', function() {\n        Google.maps.event.removeListener(listener);\n        Google.maps.event.clearInstanceListeners(autocomplete);\n        var containers = document.getElementsByClassName('pac-container');\n        for (var i = 0; i < containers.length; i++) {\n          containers[i].parentNode.removeChild(containers[i]);\n        }\n      });\n    }\n  };\n}]);\n\n})(window, window.angular);\n"],"sourceRoot":"/source/"}