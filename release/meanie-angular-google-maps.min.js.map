{"version":3,"sources":["meanie-angular-google-maps.min.js","google.service.js","placesAutocomplete.directive.js"],"names":["window","angular","undefined","module","factory","$window","google","maps","Error","directive","Google","restrict","scope","geoLocation","options","onChange","controller","$scope","$attrs","$element","$timeout","$convert","attr","placeChanged","place","object","keysToCamelCase","link","element","autocomplete","getPlace","inputValue","value","$apply","places","Autocomplete","isObject","coords","circle","Circle","radius","accuracy","center","LatLng","latitude","longitude","setBounds","getBounds","listener","event","addListener","$on","removeListener","clearInstanceListeners","containers","document","getElementsByClassName","i","length","parentNode","removeChild"],"mappings":"AAOA,cCFA,SAAQA,EAAOC,EAAAC,GAOXD,EAAAE,OAAU,8BDSXC,QAAQ,iBAAkB,UAAW,SAAUC,GAC9C,IAAKA,EAAQC,SAAWD,EAAQC,OAAOC,KEtB1C,KAAS,IAAAC,OAAQ,iHFyBd,OAAOH,GAAQC,WAEhBN,OAAQA,OAAOC,SEtBlB,SAAQD,EAAOC,EAAAC,GASXD,EAAAE,OAAU,4CAAV,4BF4BDM,UE3BC,sBAAA,gBAAA,SAAAC,GF4BA,OACEC,SAAU,IACVC,OACEC,YAAa,IEtBjBC,QAAA,IFwBIC,SAAU,KAMZC,YAAa,SAAU,SAAU,WAAY,WAAY,WAAY,SAAUC,EAAQC,EAAQC,EAAUC,EAAUC,GE9BOJ,EAAAH,QAUjHG,EAAWH,YAVsGM,EAiBnH,WACLD,EAAIG,KAAO,eAAU,SACnB,KAnBNL,EAAAM,aAAA,SAAAC,GFgDUN,EAAOH,UACTE,EAAOF,UACLS,MAAOH,EAASI,OAAOC,gBAAgBF,QEZ7CG,KAAA,SAAaf,EAAIgB,GAYK,QAOhBL,KAPR,GAAAC,GAAAK,EAAAC,UF8BIN,GAAMO,WAAaH,EAAQ,GAAGI,MAG9BpB,EAAMqB,OAAO,WElBbrB,EAAAW,aAAkBC,KFHpB,GExBIK,GADoF,GAAAnB,GAAAH,KAAA2B,OAAAC,aAAAP,EAAA,GAAAhB,EAAAE,QF4BxF,IAAIF,EAAMC,aAAeZ,EAAQmC,SAASxB,EAAMC,cAAgBD,EAAMC,YAAYwB,OAAQ,CACxF,GAAIC,GAAS,GAAI5B,GAAOH,KAAKgC,QAC3BC,OAAQ5B,EAAMC,YAAYwB,OAAOI,SACjCC,OAAQ,GAAIhC,GAAOH,KAAKoC,OAAO/B,EAAMC,YAAYwB,OAAOO,SAAUhC,EAAMC,YAAYwB,OAAOQ,YAE7FhB,GAAaiB,UAAUR,EAAOS,aEIhC,GAAAC,GAAatC,EAAOH,KAAA0C,MAAWC,YAA/BrB,EAA4C,gBAAAN,EFoB5CX,GEjE2BuC,IAAA,WAAA,WAAzBzC,EAAAH,KAAA0C,MAAAG,eAAAJ,GAzC0DtC,EAAAH,KAAA0C,MAAAI,uBAAAxB,EAZpE,KA0GW,GA1G2ByB,GAAAC,SAAAC,uBAAA,iBA0GpBC,EAAA,EA1GlBA,EAAAH,EAAAI,OAAAD,IF2HYH,EAAWG,GAAGE,WAAWC,YAAYN,EAAWG,YAMzDzD,OAAQA,OAAOC","file":"meanie-angular-google-maps.min.js","sourcesContent":["/**\n * meanie-angular-google-maps - v1.3.1 - 11-1-2016\n * https://github.com/meanie/\n *\n * Copyright (c) 2016 Adam Buczynski <me@adambuczynski.com>\n * License: MIT\n */\n'use strict';\n\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('Google.Maps.Api.Service', [])\n\n  /**\n   * Wrapper for google maps API\n   */\n  .factory('GoogleMapsApi', ['$window', function ($window) {\n    if (!$window.google || !$window.google.maps) {\n      throw new Error('Global `google` variable or `google.maps` missing.' + 'Make sure to include the relevant external Google script(s).');\n    }\n    return $window.google;\n  }]);\n})(window, window.angular);\n'use strict';\n\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('Google.Maps.PlacesAutocomplete.Directive', ['Google.Maps.Api.Service'])\n\n  /**\n   * Directive\n   */\n  .directive('placesAutocomplete', ['GoogleMapsApi', function (Google) {\n    return {\n      restrict: 'A',\n      scope: {\n        geoLocation: '=',\n        options: '=',\n        onChange: '&'\n      },\n\n      /**\n       * Controller\n       */\n      controller: ['$scope', '$attrs', '$element', '$timeout', '$convert', function ($scope, $attrs, $element, $timeout, $convert) {\n\n        //Set options\n        $scope.options = $scope.options || {};\n\n        //Turn off field's autocomplete\n        //NOTE: Setting to merely 'off' doesn't do the trick\n        //See: https://developer.mozilla.org/en-US/docs/Web/Security/\n        //     Securing_your_site/Turning_off_form_autocompletion\n        //This needs to be wrapped in a timeout because Google Maps sets it to off.\n        $timeout(function () {\n          $element.attr('autocomplete', 'nope');\n        }, 500);\n\n        /**\n         * Place changed handler\n         */\n        $scope.placeChanged = function (place) {\n          if ($attrs.onChange) {\n            $scope.onChange({\n              place: $convert.object.keysToCamelCase(place)\n            });\n          }\n        };\n      }],\n\n      /**\n       * Linking function\n       */\n      link: function link(scope, element) {\n\n        //Initialize autocomplete API now with options\n        var autocomplete = new Google.maps.places.Autocomplete(element[0], scope.options);\n\n        //Set bounds if geo location given\n        if (scope.geoLocation && angular.isObject(scope.geoLocation) && scope.geoLocation.coords) {\n          var circle = new Google.maps.Circle({\n            radius: scope.geoLocation.coords.accuracy,\n            center: new Google.maps.LatLng(scope.geoLocation.coords.latitude, scope.geoLocation.coords.longitude)\n          });\n          autocomplete.setBounds(circle.getBounds());\n        }\n\n        /**\n         * Place changed handler\n         */\n        function placeChanged() {\n\n          //Get selected place and convert keys\n          var place = autocomplete.getPlace();\n          place.inputValue = element[0].value;\n\n          //Set in scope\n          scope.$apply(function () {\n            scope.placeChanged(place);\n          });\n        }\n\n        /**\n         * Event listener for place changes\n         */\n        var listener = Google.maps.event.addListener(autocomplete, 'place_changed', placeChanged);\n\n        //Event listener for scope destruction\n        scope.$on('$destroy', function () {\n          Google.maps.event.removeListener(listener);\n          Google.maps.event.clearInstanceListeners(autocomplete);\n          var containers = document.getElementsByClassName('pac-container');\n          for (var i = 0; i < containers.length; i++) {\n            containers[i].parentNode.removeChild(containers[i]);\n          }\n        });\n      }\n    };\n  }]);\n})(window, window.angular);","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Google.Maps.Api.Service', [])\n\n/**\n * Wrapper for google maps API\n */\n.factory('GoogleMapsApi', ['$window', function($window) {\n  if (!$window.google || !$window.google.maps) {\n    throw new Error(\n      'Global `google` variable or `google.maps` missing.' +\n      'Make sure to include the relevant external Google script(s).'\n    );\n  }\n  return $window.google;\n}]);\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Google.Maps.PlacesAutocomplete.Directive', [\n  'Google.Maps.Api.Service'\n])\n\n/**\n * Directive\n */\n.directive('placesAutocomplete', ['GoogleMapsApi', function(Google) {\n  return {\n    restrict: 'A',\n    scope: {\n      geoLocation: '=',\n      options: '=',\n      onChange: '&'\n    },\n\n    /**\n     * Controller\n     */\n    controller: ['$scope', '$attrs', '$element', '$timeout', '$convert', function($scope, $attrs, $element, $timeout, $convert) {\n\n      //Set options\n      $scope.options = $scope.options || {};\n\n      //Turn off field's autocomplete\n      //NOTE: Setting to merely 'off' doesn't do the trick\n      //See: https://developer.mozilla.org/en-US/docs/Web/Security/\n      //     Securing_your_site/Turning_off_form_autocompletion\n      //This needs to be wrapped in a timeout because Google Maps sets it to off.\n      $timeout(function() {\n        $element.attr('autocomplete', 'nope');\n      }, 500);\n\n      /**\n       * Place changed handler\n       */\n      $scope.placeChanged = function(place) {\n        if ($attrs.onChange) {\n          $scope.onChange({\n            place: $convert.object.keysToCamelCase(place)\n          });\n        }\n      };\n    }],\n\n    /**\n     * Linking function\n     */\n    link: function(scope, element) {\n\n      //Initialize autocomplete API now with options\n      let autocomplete = new Google.maps.places.Autocomplete(\n        element[0], scope.options\n      );\n\n      //Set bounds if geo location given\n      if (scope.geoLocation && angular.isObject(scope.geoLocation) && scope.geoLocation.coords) {\n        let circle = new Google.maps.Circle({\n          radius: scope.geoLocation.coords.accuracy,\n          center: new Google.maps.LatLng(\n            scope.geoLocation.coords.latitude, scope.geoLocation.coords.longitude\n          )\n        });\n        autocomplete.setBounds(circle.getBounds());\n      }\n\n      /**\n       * Place changed handler\n       */\n      function placeChanged() {\n\n        //Get selected place and convert keys\n        let place = autocomplete.getPlace();\n        place.inputValue = element[0].value;\n\n        //Set in scope\n        scope.$apply(() => {\n          scope.placeChanged(place);\n        });\n      }\n\n      /**\n       * Event listener for place changes\n       */\n      let listener = Google.maps.event.addListener(\n        autocomplete, 'place_changed', placeChanged\n      );\n\n      //Event listener for scope destruction\n      scope.$on('$destroy', () => {\n        Google.maps.event.removeListener(listener);\n        Google.maps.event.clearInstanceListeners(autocomplete);\n        let containers = document.getElementsByClassName('pac-container');\n        for (let i = 0; i < containers.length; i++) {\n          containers[i].parentNode.removeChild(containers[i]);\n        }\n      });\n    }\n  };\n}]);\n\n})(window, window.angular);\n"],"sourceRoot":"/source/"}